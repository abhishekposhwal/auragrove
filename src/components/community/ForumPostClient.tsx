// This is an autogenerated file from Firebase Studio.
"use client";

import type { ForumPost, ForumReply } from '@/lib/types';
import { ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { useState, useEffect } from 'react';
import { Separator } from '@/components/ui/separator';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { forumPosts } from '@/lib/mock-data';

const replySchema = z.object({
  author: z.string().min(2, "Name must be at least 2 characters.").max(50, "Name cannot exceed 50 characters."),
  content: z.string().min(5, "Reply must be at least 5 characters.").max(1000, "Reply cannot exceed 1000 characters."),
});
type ReplyFormValues = z.infer<typeof replySchema>;

export function ForumPostClient({ post: initialPost }: { post: ForumPost }) {
  const [post, setPost] = useState<ForumPost>(initialPost);
  const { toast } = useToast();
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  const form = useForm<ReplyFormValues>({
    resolver: zodResolver(replySchema),
    defaultValues: { author: '', content: '' },
  });

  const handleAddReply = (data: ReplyFormValues) => {
    const newReply: ForumReply = {
      id: `r${Date.now()}`,
      date: new Date().toISOString(),
      ...data,
    };
    
    const updatedPost = {
      ...post,
      replies: [newReply, ...post.replies],
    };
    setPost(updatedPost);

    const postIndex = forumPosts.findIndex(p => p.id === initialPost.id);
    if (postIndex !== -1) {
        forumPosts[postIndex].replies.unshift(newReply);
    }
    
    toast({
        title: "Reply Posted!",
        description: "Thank you for contributing to the discussion.",
    });
    form.reset();
  };

  return (
    <div className="container mx-auto max-w-3xl px-4 md:px-6 py-16 md:py-24">
      <Button variant="ghost" asChild className="mb-8">
        <Link href="/community">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Forums
        </Link>
      </Button>

      <Card>
        <CardHeader>
            <CardTitle className="text-3xl font-bold">{post.title}</CardTitle>
            <div className="flex items-center gap-4 pt-2 text-sm text-muted-foreground">
                <div className="flex items-center gap-2">
                    <Avatar className="h-8 w-8">
                        <AvatarFallback>{post.author.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <span className="font-semibold text-foreground">{post.author}</span>
                </div>
                {isClient && <span>{new Date(post.date).toLocaleString()}</span>}
            </div>
        </CardHeader>
        <CardContent>
            <p className="text-lg leading-relaxed whitespace-pre-wrap">{post.content}</p>
        </CardContent>
      </Card>
      
      <Separator className="my-12" />
      
      <div className="space-y-8">
        <h2 className="text-2xl font-bold">Replies ({post.replies.length})</h2>
        
        {post.replies.length > 0 ? (
            <div className="space-y-6">
            {post.replies.map((reply) => (
                <Card key={reply.id} className="bg-muted/50">
                    <CardContent className="p-6">
                        <div className="flex items-center justify-between pb-4">
                            <div className="flex items-center gap-3">
                                <Avatar className="h-8 w-8">
                                    <AvatarFallback>{reply.author.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <p className="font-semibold">{reply.author}</p>
                            </div>
                            {isClient && <p className="text-sm text-muted-foreground">{new Date(reply.date).toLocaleString()}</p>}
                        </div>
                        <p className="text-muted-foreground">{reply.content}</p>
                    </CardContent>
                </Card>
            ))}
            </div>
        ) : (
            <div className="text-center text-muted-foreground py-8 bg-muted/50 rounded-lg">
                <p>No replies yet. Be the first to join the conversation!</p>
            </div>
        )}

        <Separator className="my-12" />
        
        <Card>
            <CardHeader>
                <CardTitle>Leave a Reply</CardTitle>
            </CardHeader>
            <CardContent>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(handleAddReply)} className="space-y-6">
                        <FormField
                            control={form.control}
                            name="author"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Your Name</FormLabel>
                                    <FormControl>
                                        <Input placeholder="Enter your name" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                        control={form.control}
                        name="content"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Your Reply</FormLabel>
                            <FormControl>
                                <Textarea placeholder="Share your thoughts..." rows={5} {...field} />
                            </FormControl>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                        <Button type="submit">Submit Reply</Button>
                    </form>
                </Form>
            </CardContent>
        </Card>
      </div>
    </div>
  );
}
