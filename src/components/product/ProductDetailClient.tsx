
// This is an autogenerated file from Firebase Studio.
"use client";

import type { Product, Review } from '@/lib/types';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { ToastAction } from "@/components/ui/toast";
import { useCart } from '@/context/CartContext';
import { useToast } from "@/hooks/use-toast";
import { Star, Leaf, CheckCircle2, Heart } from 'lucide-react';
import SustainableAlternatives from '@/components/product/SustainableAlternatives';
import { ProductReviews } from './ProductReviews';
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '../ui/card';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';
import { ReviewForm } from './ReviewForm';
import { useWishlist } from '@/context/WishlistContext';
import { cn } from '@/lib/utils';
import { useAuthState } from 'react-firebase-hooks/auth';
import { auth } from '@/lib/firebase/config';
import { products } from '@/lib/mock-data';

export function ProductDetailClient({ product: initialProduct }: { product: Product }) {
  const [product, setProduct] = useState<Product>(initialProduct);
  const { addToCart } = useCart();
  const { toast } = useToast();
  const [reviews, setReviews] = useState<Review[]>(product.reviews.items);
  const { wishlist, addToWishlist, removeFromWishlist } = useWishlist();
  const isInWishlist = wishlist.some(item => item.id === product.id);
  const [user] = useAuthState(auth);

  const handleAddToCart = () => {
    addToCart(product);
    toast({
        title: "Added to cart!",
        description: `"${product.name}" has been added to your cart.`,
        action: <ToastAction asChild altText="View cart"><Link href="/cart">View cart</Link></ToastAction>,
    });
  };

  const handleWishlistToggle = () => {
    if (isInWishlist) {
      removeFromWishlist(product.id);
      toast({
          title: "Removed from wishlist",
          description: `"${product.name}" has been removed from your wishlist.`,
      });
    } else {
      addToWishlist(product);
      toast({
          title: "Added to wishlist!",
          description: `"${product.name}" has been added to your wishlist.`,
          action: <ToastAction asChild altText="View wishlist"><Link href="/wishlist">View wishlist</Link></ToastAction>,
      });
    }
  };

  const handleAddReview = (newReviewData: Omit<Review, 'id' | 'date' | 'author'>) => {
    if (!user || !user.displayName) {
        toast({ variant: "destructive", title: "Error", description: "You must be logged in to post a review." });
        return;
    }
    const newReview: Review = {
        id: `r${Date.now()}`,
        author: user.displayName,
        date: new Date().toISOString(),
        ...newReviewData
    };

    // Find the product in the mock data source and update it
    const productIndex = products.findIndex(p => p.id === product.id);
    if (productIndex !== -1) {
      products[productIndex].reviews.items.unshift(newReview);
      products[productIndex].reviews.count += 1;
      
      const totalRating = products[productIndex].reviews.items.reduce((acc, review) => acc + review.rating, 0);
      products[productIndex].reviews.rating = parseFloat((totalRating / products[productIndex].reviews.items.length).toFixed(1));
    }
    
    // Create a deep copy of the product and update state to trigger re-render
    setProduct(prevProduct => {
        const newProductState = JSON.parse(JSON.stringify(prevProduct));
        newProductState.reviews.items.unshift(newReview);
        newProductState.reviews.count = newProductState.reviews.items.length;
        
        const totalRating = newProductState.reviews.items.reduce((acc: number, review: Review) => acc + review.rating, 0);
        newProductState.reviews.rating = parseFloat((totalRating / newProductState.reviews.items.length).toFixed(1));

        setReviews(newProductState.reviews.items);
        return newProductState;
    });
  };


  return (
    <div className="py-12">
      <div className="grid lg:grid-cols-1 gap-8 lg:gap-12">
        <div>
          <Card>
              <Carousel className="w-full">
                  <CarouselContent className="h-[500px]">
                  {product.images.map((image, index) => (
                      <CarouselItem key={index}>
                          <Image
                          src={image}
                          alt={`${product.name} - image ${index + 1}`}
                          width={1200}
                          height={675}
                          className="w-full h-full object-contain"
                          data-ai-hint="sustainable product lifestyle"
                          />
                      </CarouselItem>
                  ))}
                  </CarouselContent>
                  <CarouselPrevious className="left-4" />
                  <CarouselNext className="right-4" />
              </Carousel>
          </Card>
        </div>
      </div>
       <div className="mt-8">
            <h1 className="text-3xl md:text-4xl font-bold font-headline">{product.name}</h1>
            <p className="text-lg text-muted-foreground mt-2">{product.brand}</p>
        </div>
      
      <Separator className="my-12" />

      <div className="grid md:grid-cols-3 gap-8 lg:gap-12">
        <div className="md:col-span-2 space-y-8">
            <Card className="bg-transparent border-none shadow-none">
                <CardHeader className="px-0">
                    <CardTitle>Description & Details</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6 px-0">
                    <p className="text-base leading-relaxed text-muted-foreground">{product.description}</p>
                    <Separator />
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
                        <div className="flex items-start gap-3">
                            <CheckCircle2 className="h-5 w-5 mt-1 text-primary" />
                            <div>
                                <h4 className="font-semibold">Category</h4>
                                <p className="text-muted-foreground">{product.category}</p>
                            </div>
                        </div>
                        <div className="flex items-start gap-3">
                            <CheckCircle2 className="h-5 w-5 mt-1 text-primary" />
                            <div>
                                <h4 className="font-semibold">Brand</h4>
                                <p className="text-muted-foreground">{product.brand}</p>
                            </div>
                        </div>
                        <div className="flex items-start gap-3">
                            <CheckCircle2 className="h-5 w-5 mt-1 text-primary" />
                            <div>
                                <h4 className="font-semibold">Certifications</h4>
                                <p className="text-muted-foreground">{product.certifications.join(', ')}</p>
                            </div>
                        </div>
                        <div className="flex items-start gap-3">
                            <CheckCircle2 className="h-5 w-5 mt-1 text-primary" />
                            <div>
                                <h4 className="font-semibold">Carbon Footprint</h4>
                                <p className="text-muted-foreground">{product.carbonFootprint}</p>
                            </div>
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
        <div className="md:col-span-1 flex flex-col gap-6">
            <Card className="bg-gradient-to-br from-muted to-background/50">
                <CardHeader>
                    <CardTitle>Purchase Options</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="flex justify-between items-center">
                        <div className="flex items-center gap-1">
                            <Star className="h-5 w-5 text-accent" fill="currentColor" />
                            <span className="font-medium">{product.reviews.rating}</span>
                            <span className="text-muted-foreground text-sm">({reviews.length} reviews)</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <Leaf className="h-5 w-5 text-primary" />
                            <span className="font-medium">Green Score: {product.greenScore}/10</span>
                        </div>
                    </div>
                    
                    <p className="text-3xl font-bold text-primary">â‚¹{product.price.toFixed(2)}</p>
                </CardContent>
                <CardFooter className="flex-col gap-2">
                  <Button size="lg" className="w-full hover:bg-primary/90" onClick={handleAddToCart}>Add to Cart</Button>
                  <Button size="lg" variant="outline" className="w-full" onClick={handleWishlistToggle}>
                      <Heart className={cn("mr-2 h-5 w-5", isInWishlist && "text-destructive fill-destructive")} />
                      {isInWishlist ? 'Remove from Wishlist' : 'Add to Wishlist'}
                  </Button>
                </CardFooter>
            </Card>
        </div>
      </div>
      
      <Separator className="my-12" />

      <SustainableAlternatives product={product} />

      <Separator className="my-12" />
      
      <div className="space-y-8">
        <ProductReviews 
            reviews={reviews} 
            averageRating={product.reviews.rating}
        />
        <Card className="bg-transparent border-none shadow-none">
            <CardHeader className="p-0">
                <CardTitle>Write a Review</CardTitle>
                <CardDescription>Share your thoughts about the product with the community.</CardDescription>
            </CardHeader>
            <CardContent className="pt-6 px-0">
                {user ? (
                    <ReviewForm onSubmit={handleAddReview} />
                ) : (
                    <div className="text-center p-8 border-dashed border-2 rounded-lg">
                        <p className="text-muted-foreground">You must be logged in to write a review.</p>
                        <Button asChild variant="link" className="mt-2">
                           <Link href="/account">Log In or Sign Up</Link>
                        </Button>
                    </div>
                )}
            </CardContent>
        </Card>
      </div>

    </div>
  );
}
