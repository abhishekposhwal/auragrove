
// This is an autogenerated file from Firebase Studio.
"use client";
import { useState, useEffect } from "react";
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { useCart } from "@/context/CartContext";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { CreditCard, Lock, Truck, CheckCircle2, IndianRupee, HandCoins } from "lucide-react";
import { useProfile } from "@/context/ProfileContext";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth } from "@/lib/firebase/config";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import Link from "next/link";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";


const shippingSchema = z.object({
  name: z.string().min(2, "Name is required"),
  address: z.string().min(5, "Address is required"),
  city: z.string().min(2, "City is required"),
  zip: z.string().min(5, "Zip code is required"),
  country: z.string().min(2, "Country is required"),
});

const paymentSchema = z.object({
  paymentMethod: z.enum(["card", "upi", "cod"]),
  cardNumber: z.string().optional(),
  expiry: z.string().optional(),
  cvc: z.string().optional(),
  upiId: z.string().optional(),
}).refine(data => {
    if (data.paymentMethod === "card") {
        return /^(?:\d{4} ?){4}$/.test(data.cardNumber ?? "");
    }
    return true;
}, {
    message: "Invalid card number",
    path: ["cardNumber"],
}).refine(data => {
    if (data.paymentMethod === "card") {
        return /^(0[1-9]|1[0-2])\/?([0-9]{2})$/.test(data.expiry ?? "");
    }
    return true;
}, {
    message: "Invalid expiry date (MM/YY)",
    path: ["expiry"],
}).refine(data => {
    if (data.paymentMethod === "card") {
        return /^\d{3,4}$/.test(data.cvc ?? "");
    }
    return true;
}, {
    message: "Invalid CVC",
    path: ["cvc"],
}).refine(data => {
    if (data.paymentMethod === "upi") {
        return /^[a-zA-Z0-9.\-_]{2,256}@[a-zA-Z]{2,64}$/.test(data.upiId ?? "");
    }
    return true;
}, {
    message: "Invalid UPI ID",
    path: ["upiId"],
});


const checkoutSchema = shippingSchema.merge(paymentSchema);

type CheckoutFormValues = z.infer<typeof checkoutSchema>;

export default function CheckoutPage() {
  const { cart, getCartTotal, clearCart } = useCart();
  const { profile } = useProfile();
  const [user] = useAuthState(auth);
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState("card");

  const methods = useForm<CheckoutFormValues>({
    resolver: zodResolver(checkoutSchema),
    defaultValues: {
        name: "",
        address: "",
        city: "",
        zip: "",
        country: "",
        paymentMethod: "card",
        cardNumber: "",
        expiry: "",
        cvc: "",
        upiId: "",
    }
  });

  const { handleSubmit, trigger, formState: { errors }, reset, setValue } = methods;

  useEffect(() => {
    if (cart.length === 0) {
      router.push('/shop');
    }
  }, [cart, router]);

  useEffect(() => {
    if (user && profile.name) {
      // Pre-fill form with profile data for logged-in users
      reset({
        name: profile.name,
        address: profile.address,
        city: profile.city,
        zip: profile.zip,
        country: profile.country,
      });
    }
  }, [user, profile, reset]);
  
  useEffect(() => {
    setValue("paymentMethod", paymentMethod as "card" | "upi" | "cod");
  }, [paymentMethod, setValue]);


  const handleNext = async () => {
    const isValid = await trigger(Object.keys(shippingSchema.shape) as Array<keyof CheckoutFormValues>);
    if (isValid) {
      setStep(2);
    }
  };

  const onSubmit = (data: CheckoutFormValues) => {
    console.log("Order submitted", data);
    clearCart();
    setIsConfirmationOpen(true);
  };

   if (cart.length === 0) {
    return null; // or a loading spinner
  }
  
  return (
    <>
    <div className="container mx-auto max-w-4xl px-4 md:px-6 py-12">
      <h1 className="text-4xl font-bold mb-8 text-center font-headline">Checkout</h1>
      <div className="grid md:grid-cols-2 gap-12">
        <div className="order-last md:order-first">
            <FormProvider {...methods}>
                <form onSubmit={handleSubmit(onSubmit)}>
                    {step === 1 && (
                        <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2"><Truck/> Shipping Details</CardTitle>
                                <CardDescription>Enter your address to receive your order.</CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <div className="space-y-2">
                                    <Label htmlFor="name">Full Name</Label>
                                    <Input id="name" {...methods.register("name")} />
                                    {errors.name && <p className="text-destructive text-sm">{errors.name.message}</p>}
                                </div>
                                 <div className="space-y-2">
                                    <Label htmlFor="address">Address</Label>
                                    <Input id="address" {...methods.register("address")} />
                                     {errors.address && <p className="text-destructive text-sm">{errors.address.message}</p>}
                                </div>
                                <div className="grid grid-cols-2 gap-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="city">City</Label>
                                        <Input id="city" {...methods.register("city")} />
                                        {errors.city && <p className="text-destructive text-sm">{errors.city.message}</p>}
                                    </div>
                                    <div className="space-y-2">
                                        <Label htmlFor="zip">Zip Code</Label>
                                        <Input id="zip" {...methods.register("zip")} />
                                        {errors.zip && <p className="text-destructive text-sm">{errors.zip.message}</p>}
                                    </div>
                                </div>
                                 <div className="space-y-2">
                                    <Label htmlFor="country">Country</Label>
                                    <Input id="country" {...methods.register("country")} />
                                    {errors.country && <p className="text-destructive text-sm">{errors.country.message}</p>}
                                </div>
                                <Button type="button" onClick={handleNext} className="w-full">Continue to Payment</Button>
                            </CardContent>
                        </Card>
                    )}
                    {step === 2 && (
                         <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2"><CreditCard/> Payment Method</CardTitle>
                                <CardDescription>Select a payment option.</CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <Tabs value={paymentMethod} onValueChange={setPaymentMethod} className="w-full">
                                    <TabsList className="grid w-full grid-cols-3">
                                        <TabsTrigger value="card"><CreditCard className="inline-block mr-2 h-4 w-4"/>Card</TabsTrigger>
                                        <TabsTrigger value="upi"><IndianRupee className="inline-block mr-2 h-4 w-4"/>UPI</TabsTrigger>
                                        <TabsTrigger value="cod"><HandCoins className="inline-block mr-2 h-4 w-4"/>COD</TabsTrigger>
                                    </TabsList>
                                    <TabsContent value="card" className="mt-4 space-y-4">
                                       <div className="space-y-2">
                                            <Label htmlFor="cardNumber">Card Number</Label>
                                            <Input id="cardNumber" placeholder="0000 0000 0000 0000" {...methods.register("cardNumber")} />
                                            {errors.cardNumber && <p className="text-destructive text-sm">{errors.cardNumber.message}</p>}
                                        </div>
                                        <div className="grid grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <Label htmlFor="expiry">Expiry (MM/YY)</Label>
                                                <Input id="expiry" placeholder="MM/YY" {...methods.register("expiry")} />
                                                {errors.expiry && <p className="text-destructive text-sm">{errors.expiry.message}</p>}
                                            </div>
                                             <div className="space-y-2">
                                                <Label htmlFor="cvc">CVC</Label>
                                                <Input id="cvc" placeholder="123" {...methods.register("cvc")} />
                                                {errors.cvc && <p className="text-destructive text-sm">{errors.cvc.message}</p>}
                                            </div>
                                        </div>
                                    </TabsContent>
                                    <TabsContent value="upi" className="mt-4 space-y-4">
                                        <div className="space-y-2">
                                            <Label htmlFor="upiId">UPI ID</Label>
                                            <Input id="upiId" placeholder="yourname@bank" {...methods.register("upiId")}/>
                                            {errors.upiId && <p className="text-destructive text-sm">{errors.upiId.message}</p>}
                                        </div>
                                        <p className="text-xs text-muted-foreground">You will be redirected to your UPI app to approve the payment.</p>
                                    </TabsContent>
                                    <TabsContent value="cod" className="mt-4">
                                        <p className="text-sm text-muted-foreground">You can pay in cash to our delivery agent upon receiving your order. Please have the exact amount ready.</p>
                                    </TabsContent>
                                </Tabs>

                                <div className="flex flex-col-reverse sm:flex-row justify-between items-center gap-4 pt-4">
                                    <Button type="button" variant="outline" onClick={() => setStep(1)}>Back to Shipping</Button>
                                    <Button type="submit" className="w-full sm:w-auto">
                                        <Lock className="mr-2 h-4 w-4" />
                                        Pay ₹{getCartTotal().toFixed(2)}
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>
                    )}
                </form>
            </FormProvider>
        </div>
        <div>
          <Card>
             <CardHeader>
                <CardTitle>Order Summary</CardTitle>
            </CardHeader>
            <CardContent>
                 <div className="space-y-4">
                    {cart.map(item => (
                        <div key={item.id} className="flex justify-between items-center">
                            <div className="flex items-center gap-4">
                                <Image src={item.images[0]} alt={item.name} width={64} height={64} className="rounded-md" />
                                <div>
                                    <p className="font-medium">{item.name}</p>
                                    <p className="text-sm text-muted-foreground">Qty: {item.quantity}</p>
                                </div>
                            </div>
                            <p className="font-medium">₹{(item.price * item.quantity).toFixed(2)}</p>
                        </div>
                    ))}
                    <Separator />
                    <div className="flex justify-between font-bold text-lg">
                        <p>Total</p>
                        <p>₹{getCartTotal().toFixed(2)}</p>
                    </div>
                </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
     <AlertDialog open={isConfirmationOpen} onOpenChange={setIsConfirmationOpen}>
        <AlertDialogContent>
            <AlertDialogHeader>
            <div className="flex justify-center">
                <CheckCircle2 className="h-16 w-16 text-green-500 mb-4" />
            </div>
            <AlertDialogTitle className="text-center text-2xl font-bold font-headline">Order Confirmed!</AlertDialogTitle>
            <AlertDialogDescription className="text-center">
                Thank you for your purchase. Your journey towards a more sustainable lifestyle is on its way. You'll receive an email confirmation shortly.
            </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter className="sm:justify-center">
                <AlertDialogCancel asChild>
                    <Link href="/account">View Orders</Link>
                </AlertDialogCancel>
                <AlertDialogAction asChild>
                    <Link href="/shop">Continue Shopping</Link>
                </AlertDialogAction>
            </AlertDialogFooter>
        </AlertDialogContent>
    </AlertDialog>
    </>
  );
}

    