// This is an autogenerated file from Firebase Studio.
"use client";
import { useState, useEffect } from "react";
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { useCart } from "@/context/CartContext";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { CreditCard, Lock, Truck } from "lucide-react";
import { useProfile } from "@/context/ProfileContext";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth } from "@/lib/firebase/config";

const shippingSchema = z.object({
  name: z.string().min(2, "Name is required"),
  address: z.string().min(5, "Address is required"),
  city: z.string().min(2, "City is required"),
  zip: z.string().min(5, "Zip code is required"),
  country: z.string().min(2, "Country is required"),
});

const paymentSchema = z.object({
  cardNumber: z.string().regex(/^(?:\d{4} ?){4}$/, "Invalid card number"),
  expiry: z.string().regex(/^(0[1-9]|1[0-2])\/?([0-9]{2})$/, "Invalid expiry date"),
  cvc: z.string().regex(/^\d{3,4}$/, "Invalid CVC"),
});

const checkoutSchema = shippingSchema.merge(paymentSchema);

type CheckoutFormValues = z.infer<typeof checkoutSchema>;

export default function CheckoutPage() {
  const { cart, getCartTotal, clearCart } = useCart();
  const { profile } = useProfile();
  const [user] = useAuthState(auth);
  const router = useRouter();
  const [step, setStep] = useState(1);
  const methods = useForm<CheckoutFormValues>({
    resolver: zodResolver(checkoutSchema),
    defaultValues: {
        name: "",
        address: "",
        city: "",
        zip: "",
        country: "",
        cardNumber: "",
        expiry: "",
        cvc: "",
    }
  });

  const { handleSubmit, trigger, formState: { errors }, reset } = methods;

  useEffect(() => {
    if (cart.length === 0) {
      router.push('/shop');
    }
  }, [cart, router]);

  useEffect(() => {
    if (user && profile.name) {
      // Pre-fill form with profile data for logged-in users
      // A simple split of address into two lines for demonstration
      const addressParts = profile.address.split(',');
      const addressLine = addressParts[0] || '';
      const city = (addressParts[1] || '').trim();
      
      reset({
        name: profile.name,
        address: addressLine,
        city: city,
        // You might need more sophisticated logic for zip and country
        zip: profile.address.match(/\d{5,6}/)?.[0] || '',
        country: "India", // Assuming default
      });
    }
  }, [user, profile, reset]);

  const handleNext = async () => {
    const isValid = await trigger(Object.keys(shippingSchema.shape) as Array<keyof CheckoutFormValues>);
    if (isValid) {
      setStep(2);
    }
  };

  const onSubmit = (data: CheckoutFormValues) => {
    console.log("Order submitted", data);
    clearCart();
    router.push("/confirmation");
  };

   if (cart.length === 0) {
    return null; // or a loading spinner
  }
  
  return (
    <div className="container mx-auto max-w-4xl px-4 md:px-6 py-12">
      <h1 className="text-4xl font-bold mb-8 text-center font-headline">Checkout</h1>
      <div className="grid md:grid-cols-2 gap-12">
        <div>
          <Card>
             <CardHeader>
                <CardTitle>Order Summary</CardTitle>
            </CardHeader>
            <CardContent>
                 <div className="space-y-4">
                    {cart.map(item => (
                        <div key={item.id} className="flex justify-between items-center">
                            <div className="flex items-center gap-4">
                                <Image src={item.images[0]} alt={item.name} width={64} height={64} className="rounded-md" />
                                <div>
                                    <p className="font-medium">{item.name}</p>
                                    <p className="text-sm text-muted-foreground">Qty: {item.quantity}</p>
                                </div>
                            </div>
                            <p className="font-medium">₹{(item.price * item.quantity).toFixed(2)}</p>
                        </div>
                    ))}
                    <Separator />
                    <div className="flex justify-between font-bold text-lg">
                        <p>Total</p>
                        <p>₹{getCartTotal().toFixed(2)}</p>
                    </div>
                </div>
            </CardContent>
          </Card>
        </div>
        <div>
            <FormProvider {...methods}>
                <form onSubmit={handleSubmit(onSubmit)}>
                    {step === 1 && (
                        <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2"><Truck/> Shipping Details</CardTitle>
                                <CardDescription>Enter your address to receive your order.</CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <div className="space-y-2">
                                    <Label htmlFor="name">Full Name</Label>
                                    <Input id="name" {...methods.register("name")} />
                                    {errors.name && <p className="text-destructive text-sm">{errors.name.message}</p>}
                                </div>
                                 <div className="space-y-2">
                                    <Label htmlFor="address">Address</Label>
                                    <Input id="address" {...methods.register("address")} />
                                     {errors.address && <p className="text-destructive text-sm">{errors.address.message}</p>}
                                </div>
                                <div className="grid grid-cols-2 gap-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="city">City</Label>
                                        <Input id="city" {...methods.register("city")} />
                                        {errors.city && <p className="text-destructive text-sm">{errors.city.message}</p>}
                                    </div>
                                    <div className="space-y-2">
                                        <Label htmlFor="zip">Zip Code</Label>
                                        <Input id="zip" {...methods.register("zip")} />
                                        {errors.zip && <p className="text-destructive text-sm">{errors.zip.message}</p>}
                                    </div>
                                </div>
                                 <div className="space-y-2">
                                    <Label htmlFor="country">Country</Label>
                                    <Input id="country" {...methods.register("country")} />
                                    {errors.country && <p className="text-destructive text-sm">{errors.country.message}</p>}
                                </div>
                                <Button type="button" onClick={handleNext} className="w-full">Continue to Payment</Button>
                            </CardContent>
                        </Card>
                    )}
                    {step === 2 && (
                         <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2"><CreditCard/> Payment Details</CardTitle>
                                <CardDescription>Your transaction is secure.</CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-4">
                               <div className="space-y-2">
                                    <Label htmlFor="cardNumber">Card Number</Label>
                                    <Input id="cardNumber" placeholder="0000 0000 0000 0000" {...methods.register("cardNumber")} />
                                    {errors.cardNumber && <p className="text-destructive text-sm">{errors.cardNumber.message}</p>}
                                </div>
                                <div className="grid grid-cols-2 gap-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="expiry">Expiry (MM/YY)</Label>
                                        <Input id="expiry" placeholder="MM/YY" {...methods.register("expiry")} />
                                        {errors.expiry && <p className="text-destructive text-sm">{errors.expiry.message}</p>}
                                    </div>
                                     <div className="space-y-2">
                                        <Label htmlFor="cvc">CVC</Label>
                                        <Input id="cvc" placeholder="123" {...methods.register("cvc")} />
                                        {errors.cvc && <p className="text-destructive text-sm">{errors.cvc.message}</p>}
                                    </div>
                                </div>
                                <div className="flex justify-between items-center gap-4">
                                    <Button type="button" variant="outline" onClick={() => setStep(1)}>Back to Shipping</Button>
                                    <Button type="submit" className="w-full">
                                        <Lock className="mr-2 h-4 w-4" />
                                        Pay ₹{getCartTotal().toFixed(2)}
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>
                    )}
                </form>
            </FormProvider>
        </div>
      </div>
    </div>
  );
}