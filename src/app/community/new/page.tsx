
// This is an autogenerated file from Firebase Studio.
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth } from "@/lib/firebase/config";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { Loader2, PlusCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { forumPosts } from "@/lib/mock-data";
import Link from "next/link";

const postSchema = z.object({
  title: z.string().min(5, "Title must be at least 5 characters.").max(100, "Title cannot exceed 100 characters."),
  content: z.string().min(10, "Content must be at least 10 characters.").max(2000, "Content cannot exceed 2000 characters."),
});

type PostFormValues = z.infer<typeof postSchema>;

export default function NewPostPage() {
  const [user, loading] = useAuthState(auth);
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<PostFormValues>({
    resolver: zodResolver(postSchema),
    defaultValues: {
      title: "",
      content: "",
    },
  });

  useEffect(() => {
    if (!loading && !user) {
      router.push('/account');
    }
  }, [user, loading, router]);
  
  const handleFormSubmit = (data: PostFormValues) => {
    if (!user || !user.displayName) {
        toast({ variant: "destructive", title: "Error", description: "You must be logged in to post." });
        return;
    }
    // In a real app, this would submit to a backend.
    // Here, we'll just add it to our mock data array and log it.
    const newPost = {
        id: `fp${Date.now()}`,
        author: user.displayName,
        date: new Date().toISOString(),
        replies: [],
        ...data,
    };
    forumPosts.unshift(newPost); // Add to the beginning of the array
    console.log("New post created:", newPost);
    
    toast({
        title: "Post Created!",
        description: "Your new discussion topic is now live.",
    });
    router.push('/community');
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-16 w-16 animate-spin" />
      </div>
    );
  }

  if (!user) {
    return null;
  }

  return (
    <div className="container mx-auto max-w-2xl px-4 md:px-6 py-12">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-3xl">
            <PlusCircle className="h-8 w-8 text-primary" />
            Create a New Post
          </CardTitle>
          <CardDescription>
            Start a new discussion and share your thoughts with the community.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Post Title</FormLabel>
                    <FormControl>
                      <Input placeholder="What's your discussion topic?" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="content"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Your Message</FormLabel>
                    <FormControl>
                      <Textarea placeholder="Elaborate on your topic or question here..." rows={8} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" disabled={form.formState.isSubmitting}>
                {form.formState.isSubmitting ? "Submitting..." : "Submit Post"}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}
