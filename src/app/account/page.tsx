// This is an autogenerated file from Firebase Studio.
"use client";

import { useAuthState } from "react-firebase-hooks/auth";
import { auth } from "@/lib/firebase/config";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Link from "next/link";
import { useState, useEffect } from "react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, User as UserIcon, Edit, Save, XCircle, LogOut } from "lucide-react";
import { useCreateUserWithEmailAndPassword, useSignInWithEmailAndPassword, useSignOut, useUpdateProfile } from "react-firebase-hooks/auth";
import { useProfile } from "@/context/ProfileContext";

export default function AccountPage() {
  const [user, loading] = useAuthState(auth);
  const [
    createUserWithEmailAndPassword,
    _signUpUser,
    signUpLoading,
    signUpError,
  ] = useCreateUserWithEmailAndPassword(auth);
  const [
    signInWithEmailAndPassword,
    _signInUser,
    signInLoading,
    signInError,
  ] = useSignInWithEmailAndPassword(auth);
  const [signOut, signOutLoading] = useSignOut(auth);
  const [updateProfile, updatingProfile] = useUpdateProfile(auth);

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');

  const { profile, setProfile } = useProfile();
  const [tempProfile, setTempProfile] = useState(profile);
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    if (user) {
        setProfile(prev => ({...prev, name: user.displayName || prev.name || "EcoChic User"}));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user]);

  useEffect(() => {
    setTempProfile(profile);
  }, [profile]);

  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault();
    const newUser = await createUserWithEmailAndPassword(email, password);
    if (newUser) {
      await updateProfile({ displayName: name });
      await newUser.user.reload();
    }
  };

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    await signInWithEmailAndPassword(email, password);
  };
  
  const handleSaveProfile = async () => {
    if (user && tempProfile.name !== user.displayName) {
        await updateProfile({ displayName: tempProfile.name });
    }
    setProfile(tempProfile);
    setIsEditing(false);
  };

  const handleCancelEdit = () => {
    setTempProfile(profile);
    setIsEditing(false);
  };
  
  if (loading || signUpLoading || signInLoading || signOutLoading || updatingProfile) {
    return (
      <div className="flex justify-center items-center h-[60vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </div>
    );
  }

  if (user) {
    return (
       <div className="container mx-auto max-w-4xl px-4 md:px-6 py-16 md:py-24">
        <div className="mb-12 text-center">
            <h1 className="text-4xl md:text-5xl font-bold">My Account</h1>
            <p className="text-lg text-muted-foreground mt-2">Manage your profile, orders, and preferences.</p>
        </div>
        <div className="grid md:grid-cols-3 gap-8">
            <div className="md:col-span-1">
                <Card>
                    <CardHeader className="text-center items-center">
                        <UserIcon className="h-20 w-20 mb-4 text-primary" />
                        <CardTitle>{profile.name}</CardTitle>
                        <CardDescription className="break-all pt-1">
                           {user.email}
                        </CardDescription>
                    </CardHeader>
                    <CardFooter className="flex-col gap-2">
                        <Button onClick={() => signOut()} className="w-full" variant="outline">
                            <LogOut className="mr-2 h-4 w-4"/>
                            Sign Out
                        </Button>
                    </CardFooter>
                </Card>
            </div>

            <div className="md:col-span-2">
                 <Card>
                    <CardHeader>
                        <div className="flex justify-between items-center">
                            <CardTitle>Your Profile</CardTitle>
                            {!isEditing && (
                                <Button variant="ghost" size="icon" onClick={() => { setTempProfile(profile); setIsEditing(true); }}>
                                    <Edit className="h-5 w-5" />
                                </Button>
                            )}
                        </div>
                        <CardDescription>Manage your personal and shipping information.</CardDescription>
                    </CardHeader>
                    <CardContent>
                        {isEditing ? (
                            <form className="space-y-4">
                                <div className="space-y-2">
                                    <Label htmlFor="profile-name">Name</Label>
                                    <Input id="profile-name" value={tempProfile.name} onChange={(e) => setTempProfile({...tempProfile, name: e.target.value})} />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="profile-address">Address</Label>
                                    <Input id="profile-address" value={tempProfile.address} onChange={(e) => setTempProfile({...tempProfile, address: e.target.value})} />
                                </div>
                                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div className="space-y-2">
                                    <Label htmlFor="profile-city">City</Label>
                                    <Input id="profile-city" value={tempProfile.city} onChange={(e) => setTempProfile({...tempProfile, city: e.target.value})} />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="profile-zip">Zip Code</Label>
                                    <Input id="profile-zip" value={tempProfile.zip} onChange={(e) => setTempProfile({...tempProfile, zip: e.target.value})} />
                                </div>
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="profile-country">Country</Label>
                                    <Input id="profile-country" value={tempProfile.country} onChange={(e) => setTempProfile({...tempProfile, country: e.target.value})} />
                                </div>
                                <div className="space-y-2">
                                    <Label htmlFor="profile-contact">Contact Number</Label>
                                    <Input id="profile-contact" value={tempProfile.contact} onChange={(e) => setTempProfile({...tempProfile, contact: e.target.value})} />
                                </div>
                            </form>
                        ) : (
                            <div className="space-y-4 text-sm">
                                <div className="grid grid-cols-3">
                                    <h4 className="font-semibold text-muted-foreground col-span-1">Name</h4>
                                    <p className="col-span-2">{profile.name}</p>
                                </div>
                                <div className="grid grid-cols-3">
                                    <h4 className="font-semibold text-muted-foreground col-span-1">Address</h4>
                                    <p className="col-span-2">{profile.address}</p>
                                </div>
                                <div className="grid grid-cols-3">
                                    <h4 className="font-semibold text-muted-foreground col-span-1">City</h4>
                                    <p className="col-span-2">{profile.city}</p>
                                </div>
                                <div className="grid grid-cols-3">
                                    <h4 className="font-semibold text-muted-foreground col-span-1">Zip Code</h4>
                                    <p className="col-span-2">{profile.zip}</p>
                                </div>
                                <div className="grid grid-cols-3">
                                    <h4 className="font-semibold text-muted-foreground col-span-1">Country</h4>
                                    <p className="col-span-2">{profile.country}</p>
                                </div>
                                <div className="grid grid-cols-3">
                                    <h4 className="font-semibold text-muted-foreground col-span-1">Contact</h4>
                                    <p className="col-span-2">{profile.contact}</p>
                                </div>
                            </div>
                        )}
                    </CardContent>
                    {isEditing && (
                        <CardFooter className="justify-end gap-2">
                            <Button variant="ghost" onClick={handleCancelEdit}>
                                <XCircle className="mr-2 h-4 w-4" />
                                Cancel
                            </Button>
                            <Button onClick={handleSaveProfile}>
                                <Save className="mr-2 h-4 w-4" />
                                Save Changes
                            </Button>
                        </CardFooter>
                    )}
                </Card>
            </div>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto max-w-md px-4 md:px-6 py-16 md:py-24">
       {(signInError || signUpError) && (
        <Alert variant="destructive" className="mb-6">
          <AlertTitle>Authentication Error</AlertTitle>
          <AlertDescription>{signInError?.message || signUpError?.message}</AlertDescription>
        </Alert>
      )}
      <Tabs defaultValue="login" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="login">Log In</TabsTrigger>
          <TabsTrigger value="signup">Sign Up</TabsTrigger>
        </TabsList>
        <TabsContent value="login">
          <Card>
            <CardHeader>
              <CardTitle>Welcome Back</CardTitle>
              <CardDescription>
                Log in to manage your account and orders.
              </CardDescription>
            </CardHeader>
            <form onSubmit={handleSignIn}>
                <CardContent className="space-y-4">
                <div className="space-y-2">
                    <Label htmlFor="email-login">Email</Label>
                    <Input id="email-login" type="email" placeholder="you@example.com" value={email} onChange={(e) => setEmail(e.target.value)} />
                </div>
                <div className="space-y-2">
                    <Label htmlFor="password-login">Password</Label>
                    <Input id="password-login" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
                </div>
                </CardContent>
                <CardFooter>
                    <Button className="w-full" type="submit">Log In</Button>
                </CardFooter>
            </form>
          </Card>
        </TabsContent>
        <TabsContent value="signup">
          <Card>
            <CardHeader>
              <CardTitle>Create an Account</CardTitle>
              <CardDescription>
                Join our community and start your sustainable journey.
              </CardDescription>
            </CardHeader>
            <form onSubmit={handleSignUp}>
                <CardContent className="space-y-4">
                <div className="space-y-2">
                    <Label htmlFor="name-signup">Name</Label>
                    <Input id="name-signup" type="text" placeholder="Your Name" value={name} onChange={(e) => setName(e.target.value)} />
                </div>
                <div className="space-y-2">
                    <Label htmlFor="email-signup">Email</Label>
                    <Input id="email-signup" type="email" placeholder="you@example.com" value={email} onChange={(e) => setEmail(e.target.value)} />
                </div>
                <div className="space-y-2">
                    <Label htmlFor="password-signup">Password</Label>
                    <Input id="password-signup" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
                </div>
                </CardContent>
                <CardFooter>
                  <Button className="w-full" type="submit">Create Account</Button>
                </CardFooter>
            </form>
          </Card>
        </TabsContent>
      </Tabs>
      <Separator className="my-8" />
      <p className="text-center text-sm text-muted-foreground">
        By continuing, you agree to our{' '}
        <Button variant="link" asChild className="p-0 h-auto"><Link href="/policies">Terms of Service</Link></Button>.
      </p>
    </div>
  );
}
