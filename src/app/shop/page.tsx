// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useMemo } from 'react';
import { ProductListCard } from '@/components/product/ProductListCard';
import { products, categories, brands } from '@/lib/mock-data';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Button } from '@/components/ui/button';
import { X } from 'lucide-react';
import { AnimatedSection } from '@/components/shared/AnimatedSection';

export default function ShopPage() {
  const initialFilters = {
    category: 'all',
    brand: 'all',
    minGreenScore: 0,
    sortBy: 'popularity',
  };
  
  const [filters, setFilters] = useState(initialFilters);

  const handleFilterChange = (key: keyof typeof filters, value: string | number) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };
  
  const handleSliderChange = (value: number[]) => {
    handleFilterChange('minGreenScore', value[0]);
  }

  const resetFilters = () => {
    setFilters(initialFilters);
  }

  const filteredProducts = useMemo(() => {
    let sortedProducts = [...products];

    // Sorting
    if (filters.sortBy === 'price-asc') {
      sortedProducts.sort((a, b) => a.price - b.price);
    } else if (filters.sortBy === 'price-desc') {
      sortedProducts.sort((a, b) => b.price - a.price);
    } else if (filters.sortBy === 'score-desc') {
      sortedProducts.sort((a, b) => b.greenScore - a.greenScore);
    } else { // popularity
      sortedProducts.sort((a, b) => b.reviews.count - a.reviews.count);
    }

    // Filtering
    return sortedProducts.filter(product => {
      const categoryMatch = filters.category === 'all' || product.category.toLowerCase().replace(' ', '-') === filters.category;
      const brandMatch = filters.brand === 'all' || product.brand.toLowerCase().replace(/ /g, '') === filters.brand;
      const scoreMatch = product.greenScore >= filters.minGreenScore;
      return categoryMatch && brandMatch && scoreMatch;
    });
  }, [filters]);

  return (
    <div className="container mx-auto px-4 md:px-6 py-12 md:py-16">
      <AnimatedSection className="text-center mb-12">
        <h1 className="text-4xl md:text-5xl font-bold">Shop Our Collection</h1>
        <p className="text-lg text-muted-foreground mt-2">Find your next favorite sustainable product.</p>
      </AnimatedSection>
      <div className="grid lg:grid-cols-4 gap-8">
        <aside className="lg:col-span-1">
          <AnimatedSection>
            <Card className="sticky top-24">
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle>Filters</CardTitle>
                <Button variant="ghost" size="sm" onClick={resetFilters}>
                  <X className="h-4 w-4 mr-2" />
                  Reset
                </Button>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="category">Category</Label>
                  <Select
                    value={filters.category}
                    onValueChange={(value) => handleFilterChange('category', value)}
                  >
                    <SelectTrigger id="category">
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map(c => <SelectItem key={c.value} value={c.value}>{c.name}</SelectItem>)}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="brand">Brand</Label>
                  <Select
                    value={filters.brand}
                    onValueChange={(value) => handleFilterChange('brand', value)}
                  >
                    <SelectTrigger id="brand">
                      <SelectValue placeholder="Select a brand" />
                    </SelectTrigger>
                    <SelectContent>
                      {brands.map(b => <SelectItem key={b.value} value={b.value.toLowerCase().replace(/ /g, '')}>{b.name}</SelectItem>)}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-4">
                  <Label>Min. Green Score: {filters.minGreenScore}</Label>
                  <Slider
                    value={[filters.minGreenScore]}
                    max={10}
                    step={1}
                    onValueChange={handleSliderChange}
                  />
                </div>

                <div className="space-y-3">
                  <Label>Sort By</Label>
                  <RadioGroup 
                    value={filters.sortBy}
                    onValueChange={(value) => handleFilterChange('sortBy', value)}
                    className="space-y-2"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="popularity" id="popularity" />
                      <Label htmlFor="popularity" className="font-normal">Popularity</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="score-desc" id="score-desc" />
                      <Label htmlFor="score-desc" className="font-normal">Green Score (High to Low)</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="price-asc" id="price-asc" />
                      <Label htmlFor="price-asc" className="font-normal">Price (Low to High)</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="price-desc" id="price-desc" />
                      <Label htmlFor="price-desc" className="font-normal">Price (High to Low)</Label>
                    </div>
                  </RadioGroup>
                </div>
              </CardContent>
            </Card>
          </AnimatedSection>
        </aside>
        <main className="lg:col-span-3">
          <div className="flex flex-col gap-6">
            {filteredProducts.map((product, index) => (
              <AnimatedSection key={product.id} delay={index * 0.1}>
                <ProductListCard product={product} />
              </AnimatedSection>
            ))}
          </div>
          {filteredProducts.length === 0 && (
            <AnimatedSection>
              <div className="text-center py-24 flex flex-col items-center justify-center bg-muted/50 rounded-lg">
                <h2 className="text-2xl font-semibold">No Products Found</h2>
                <p className="text-muted-foreground mt-2">Try adjusting your filters or click reset.</p>
              </div>
            </AnimatedSection>
          )}
        </main>
      </div>
    </div>
  );
}
